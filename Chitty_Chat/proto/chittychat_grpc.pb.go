// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.7
// source: chittychat.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// Chitty_ChatClient is the client API for Chitty_Chat service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type Chitty_ChatClient interface {
	Broadcast(ctx context.Context, in *Participant, opts ...grpc.CallOption) (Chitty_Chat_BroadcastClient, error)
	Publish(ctx context.Context, in *Message, opts ...grpc.CallOption) (*Empty, error)
	Leave(ctx context.Context, in *Participant, opts ...grpc.CallOption) (*Empty, error)
}

type chitty_ChatClient struct {
	cc grpc.ClientConnInterface
}

func NewChitty_ChatClient(cc grpc.ClientConnInterface) Chitty_ChatClient {
	return &chitty_ChatClient{cc}
}

func (c *chitty_ChatClient) Broadcast(ctx context.Context, in *Participant, opts ...grpc.CallOption) (Chitty_Chat_BroadcastClient, error) {
	stream, err := c.cc.NewStream(ctx, &Chitty_Chat_ServiceDesc.Streams[0], "/Chitty_Chat/Broadcast", opts...)
	if err != nil {
		return nil, err
	}
	x := &chitty_ChatBroadcastClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Chitty_Chat_BroadcastClient interface {
	Recv() (*Message, error)
	grpc.ClientStream
}

type chitty_ChatBroadcastClient struct {
	grpc.ClientStream
}

func (x *chitty_ChatBroadcastClient) Recv() (*Message, error) {
	m := new(Message)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *chitty_ChatClient) Publish(ctx context.Context, in *Message, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/Chitty_Chat/Publish", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chitty_ChatClient) Leave(ctx context.Context, in *Participant, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/Chitty_Chat/Leave", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Chitty_ChatServer is the server API for Chitty_Chat service.
// All implementations must embed UnimplementedChitty_ChatServer
// for forward compatibility
type Chitty_ChatServer interface {
	Broadcast(*Participant, Chitty_Chat_BroadcastServer) error
	Publish(context.Context, *Message) (*Empty, error)
	Leave(context.Context, *Participant) (*Empty, error)
	mustEmbedUnimplementedChitty_ChatServer()
}

// UnimplementedChitty_ChatServer must be embedded to have forward compatible implementations.
type UnimplementedChitty_ChatServer struct {
}

func (UnimplementedChitty_ChatServer) Broadcast(*Participant, Chitty_Chat_BroadcastServer) error {
	return status.Errorf(codes.Unimplemented, "method Broadcast not implemented")
}
func (UnimplementedChitty_ChatServer) Publish(context.Context, *Message) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Publish not implemented")
}
func (UnimplementedChitty_ChatServer) Leave(context.Context, *Participant) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Leave not implemented")
}
func (UnimplementedChitty_ChatServer) mustEmbedUnimplementedChitty_ChatServer() {}

// UnsafeChitty_ChatServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to Chitty_ChatServer will
// result in compilation errors.
type UnsafeChitty_ChatServer interface {
	mustEmbedUnimplementedChitty_ChatServer()
}

func RegisterChitty_ChatServer(s grpc.ServiceRegistrar, srv Chitty_ChatServer) {
	s.RegisterService(&Chitty_Chat_ServiceDesc, srv)
}

func _Chitty_Chat_Broadcast_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Participant)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(Chitty_ChatServer).Broadcast(m, &chitty_ChatBroadcastServer{stream})
}

type Chitty_Chat_BroadcastServer interface {
	Send(*Message) error
	grpc.ServerStream
}

type chitty_ChatBroadcastServer struct {
	grpc.ServerStream
}

func (x *chitty_ChatBroadcastServer) Send(m *Message) error {
	return x.ServerStream.SendMsg(m)
}

func _Chitty_Chat_Publish_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Message)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Chitty_ChatServer).Publish(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Chitty_Chat/Publish",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Chitty_ChatServer).Publish(ctx, req.(*Message))
	}
	return interceptor(ctx, in, info, handler)
}

func _Chitty_Chat_Leave_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Participant)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Chitty_ChatServer).Leave(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Chitty_Chat/Leave",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Chitty_ChatServer).Leave(ctx, req.(*Participant))
	}
	return interceptor(ctx, in, info, handler)
}

// Chitty_Chat_ServiceDesc is the grpc.ServiceDesc for Chitty_Chat service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Chitty_Chat_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Chitty_Chat",
	HandlerType: (*Chitty_ChatServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Publish",
			Handler:    _Chitty_Chat_Publish_Handler,
		},
		{
			MethodName: "Leave",
			Handler:    _Chitty_Chat_Leave_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Broadcast",
			Handler:       _Chitty_Chat_Broadcast_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "chittychat.proto",
}
